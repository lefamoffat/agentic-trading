---
description: Core Architecture Principles
globs: 
alwaysApply: false
---
# Core Architecture Principles

## 1. Configuration-First Architecture
**ALL SYSTEM BEHAVIOR MUST BE CONFIGURABLE VIA YAML FILES IN @/configs**

- Components derive ALL behavior from configuration dataclasses
- NO hardcoded defaults in component constructors
- Config dataclasses must include ALL fields needed by components

```python
# ✅ CORRECT: Config-driven component
class Component:
    def __init__(self, config: ComponentConfig):
        self.config = config

# ❌ WRONG: Component-specific parameters
class Component:
    def __init__(self, param1, param2, config):
        # Violates configuration-first principle
```

## 2. Investigation-First Development
**THOROUGH INVESTIGATION FIRST, PRECISE FIX LATER**

- Read official documentation before implementing fixes
- Understand root causes, not symptoms
- Implement single correct solution, not multiple fallbacks
- NO try-catch for unknown behavior
- NO conditional logic for "either X or Y" cases

```python
# ❌ WRONG: Multiple fallback approaches
if zip_path.exists():
    actual_path = zip_path
elif file_path.exists():
    actual_path = file_path

# ✅ CORRECT: Single, understood approach
# Based on SB3 docs: models saved as .zip files
zip_path = base_path.with_suffix('.zip')
return model_cls.load(base_path, env=self.env)
```

## 3. Broker-Agnostic Design
- All components must work across different brokers
- Use composition over inheritance
- Clear separation of concerns
- Dependency injection for testability

## 4. Production-Ready Standards
- Type safety with comprehensive hints
- Graceful error handling and fallbacks
- Efficient data processing for real-time trading
- Consistent patterns and comprehensive documentation

## Testing Philosophy
- Tests validate architecture, NEVER drive architectural changes
- Configuration-first design takes precedence over test convenience
- Fix test expectations, not the architecture
