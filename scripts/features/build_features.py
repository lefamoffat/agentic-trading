#!/usr/bin/env python3
"""
Build features using Qlib.

This script initializes Qlib using the pre-existing binary data source,
calculates a defined set of alpha factors, and saves the resulting
feature set to a CSV file in the processed data directory.

It assumes that the Qlib binary data has already been created by the
`scripts/data/dump_bin.py` script.

Usage:
    python -m scripts.features.build_features --symbol EUR/USD --timeframe 1h
"""
import argparse
import re
from pathlib import Path

import pandas as pd
import qlib
from qlib.data import D
from src.types.timeframe import Timeframe

# A selection of factors from Alpha360. We can expand this list.
# See: https://qlib.readthedocs.io/en/latest/component/meta_dataset.html#alpha-360
ALPHA_FACTORS = [
    "Mean($close, 5)",  # 5-day moving average of close price
    "Std($close, 20)",  # 20-day standard deviation (volatility) of close price
    "($close - Ref($close, 10)) / Ref($close, 10)",  # 10-day Rate of Change (Momentum)
]


def _get_qlib_freq(timeframe: str) -> str:
    """
    Converts a standard timeframe string to a Qlib-compatible frequency
    by looking it up in the centralized Timeframe enum.
    """
    timeframe_enum = Timeframe.from_standard(timeframe)
    return timeframe_enum.qlib_name


def sanitize_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Sanitize the column names of a DataFrame.
    
    Qlib generates column names like 'Mean($close, 5)' or '$high'.
    This function converts them to a more database-friendly format
    like 'mean_close_5' or 'high'.

    Args:
        df (pd.DataFrame): The DataFrame with raw column names.

    Returns:
        pd.DataFrame: The DataFrame with sanitized column names.
    """
    sanitized_columns = {}
    for col in df.columns:
        # Remove the '$' sign
        new_col = col.replace('$', '')
        # Replace non-alphanumeric characters with underscores
        new_col = re.sub(r'[^a-zA-Z0-9_]', '_', new_col)
        # Remove leading/trailing underscores
        new_col = new_col.strip('_')
        # Replace multiple underscores with a single one
        new_col = re.sub(r'__+', '_', new_col)
        sanitized_columns[col] = new_col.lower()
    
    df = df.rename(columns=sanitized_columns)
    return df


def build_features(symbol: str, timeframe: str) -> None:
    """
    Build daily features for a given symbol using Qlib's binary data source.

    Args:
        symbol (str): The trading symbol (e.g., "EUR/USD").
        timeframe (str): The data timeframe (e.g., "1h").
    """
    sanitized_symbol = symbol.replace("/", "")
    
    # Define paths
    qlib_data_dir = Path("data/qlib_data")
    output_dir = Path("data/processed/features")
    output_dir.mkdir(parents=True, exist_ok=True)

    # --- Step 1: Initialize Qlib ---
    # This step assumes the binary data has already been generated by dump_bin.py
    if not (qlib_data_dir / "calendars").exists() or not (qlib_data_dir / "instruments").exists():
        print(f"Qlib data not found at {qlib_data_dir}. Please run the data preparation script first.")
        return
        
    print("Initializing Qlib...")
    qlib.init(provider_uri=str(qlib_data_dir.resolve()))
    print("Qlib initialized successfully.")

    # --- Step 2: Define fields and fetch features from Qlib ---
    print("Defining fields and fetching features from Qlib...")
    
    # Prefixing with '$' tells Qlib to use the raw value. Formulas are used directly.
    fields = ["$open", "$high", "$low", "$close", "$volume"] + ALPHA_FACTORS
    qlib_freq = _get_qlib_freq(timeframe)
    
    # Fetch all data, including calculated alpha factors
    all_df = D.features(
        instruments=[sanitized_symbol],
        fields=fields,
        freq=qlib_freq,
    )

    if all_df.empty:
        print(f"Could not generate features for {symbol}. The Qlib data might be empty or out of range.")
        return

    # --- Step 3: Clean up and Save ---
    all_df = all_df.reset_index()
    all_df.rename(columns={"datetime": "timestamp", "instrument": "symbol"}, inplace=True)
    
    all_df = sanitize_column_names(all_df)
    
    final_df = all_df.drop(columns=["symbol"])
    
    output_path = output_dir / f"{sanitized_symbol}_{timeframe}_features.csv"
    final_df.to_csv(output_path, index=False)
    
    print(f"âœ… Features built successfully!")
    print(f"Saved {len(final_df.columns)} features for {len(final_df)} timesteps to {output_path}")


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="Build features using Qlib")
    parser.add_argument(
        "--symbol",
        type=str,
        default="EUR/USD",
        help="The trading symbol to process (e.g., EUR/USD)",
    )
    parser.add_argument(
        "--timeframe",
        type=str,
        default="1d",
        help="The timeframe of the data (e.g., 1d, 1h)",
    )
    
    args = parser.parse_args()

    print("ðŸš€ Starting Feature Building Process")
    print("=" * 40)
    print(f"Symbol: {args.symbol}")
    print(f"Timeframe: {args.timeframe}")
    print("=" * 40)
    
    build_features(symbol=args.symbol, timeframe=args.timeframe)


if __name__ == "__main__":
    main()